/* Definition section */
%{
    #include "common.h"
    #include "y.tab.h"	/* header file generated by bison */
    extern YYSTYPE yylval;

    #define YY_NO_UNPUT
    #define YY_NO_INPUT
%}

/* Define regular expression label */
letter [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)

%x CMT
%x STR
%option yylineno

/* Rules section */
%%

"/*"        { BEGIN(CMT); }
<CMT>"*/"   { BEGIN(INITIAL); }
<CMT>\n     {;}
<CMT>.      {;}
"//".*      {;}
"\""        { BEGIN(STR);
                return '"';
            }
<STR>"\""   { BEGIN(INITIAL);
                return '"';
            }
<STR>[^\"]* { yylval.s_val = strdup(yytext);
                return STRING_LIT;
            }
"+"         { yylval.s_val=strdup("ADD"); return ADD; }
"-"         { yylval.s_val=strdup("SUB"); return SUB; }
"*"         { yylval.s_val=strdup("MUL"); return MUL; }
"/"         { yylval.s_val=strdup("QUO"); return QUO; }
"%"         { yylval.s_val=strdup("REM"); return REM; }
"++"        { return INC; }
"--"        { return DEC; }

">"         { yylval.s_val=strdup("GTR"); return GTR; }
"<"         { yylval.s_val=strdup("LSS"); return LSS; }
">="        { yylval.s_val=strdup("GEQ"); return GEQ; }
"<="        { yylval.s_val=strdup("LEQ"); return LEQ; }
"=="        { yylval.s_val=strdup("EQL");return EQL; }
"!="        { yylval.s_val=strdup("NEQ");return NEQ; }

"="         { yylval.s_val=strdup("ASSIGN"); return ASSIGN; }
"+="        { yylval.s_val=strdup("ADD_ASSIGN"); return ADD_ASSIGN; }
"-="        { yylval.s_val=strdup("SUB_ASSIGN"); return SUB_ASSIGN; }
"*="        { yylval.s_val=strdup("MUL_ASSIGN"); return MUL_ASSIGN; }
"/="        { yylval.s_val=strdup("QUO_ASSIGN"); return QUO_ASSIGN; }
"%="        { yylval.s_val=strdup("REM_ASSIGN"); return REM_ASSIGN; }

"&&"        { yylval.s_val=strdup("LAND");return LAND; }
"||"        { yylval.s_val=strdup("LOR");return LOR; }
"!"         { yylval.s_val=strdup("NOT");return NOT; }

"("         { return '('; }
")"         { return ')'; }
"["         { return '['; }
"]"         { return ']'; }
"{"         { return '{'; }
"}"         { return '}'; }

";"         { return ';'; }
","         { return ','; }
"\n"        { return NEWLINE; }

"print"     { return PRINT; }
"println"   { return PRINTLN; }
"if"        { return IF; }
"else"      { return ELSE; }
"for"       { yylval.s_val=strdup("FOR");return FOR; }

"int32"     {   yylval.s_val = strdup(yytext);
                return INT; }
"float32"   {   yylval.s_val = strdup(yytext);
                return FLOAT;}
"string"    {   yylval.s_val = strdup(yytext);
                return STRING; }
"bool"      {   yylval.s_val = strdup(yytext);
                return BOOL; }
"true"      {return TRUE;}
"false"     {return FALSE;}
"var"       { return VAR; }

{inumber}   { yylval.i_val = atoi(yytext);
                return INT_LIT;
            }
{fnumber}   { yylval.f_val = atof(yytext);
                return FLOAT_LIT;
             }
{id}        {   
                yylval.s_val = strdup(yytext);
                return identifier; }

<<EOF>>     { static int once = 0;
                if (once++) {
                    yyterminate();
                }
                yylineno++;
                return NEWLINE;
            }
[ \t]+      {;}
.           {;}
%%

/*  C Code section */
int yywrap(void)
{
    return 1;
}
